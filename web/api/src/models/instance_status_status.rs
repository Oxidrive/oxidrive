/*
 * Oxidrive API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InstanceStatusStatus {
    #[serde(rename = "publicURL")]
    pub public_url: String,
    #[serde(rename = "database")]
    pub database: Database,
    #[serde(rename = "fileStorage")]
    pub file_storage: FileStorage,
    #[serde(rename = "setupCompleted")]
    pub setup_completed: bool,
}

impl InstanceStatusStatus {
    pub fn new(
        public_url: String,
        database: Database,
        file_storage: FileStorage,
        setup_completed: bool,
    ) -> InstanceStatusStatus {
        InstanceStatusStatus {
            public_url,
            database,
            file_storage,
            setup_completed,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Database {
    #[serde(rename = "postgres")]
    Postgres,
    #[serde(rename = "sqlite")]
    Sqlite,
}

impl Default for Database {
    fn default() -> Database {
        Self::Postgres
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FileStorage {
    #[serde(rename = "filesystem")]
    Filesystem,
    #[serde(rename = "s3")]
    S3,
}

impl Default for FileStorage {
    fn default() -> FileStorage {
        Self::Filesystem
    }
}
