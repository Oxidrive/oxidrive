/*
 * Oxidrive API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct File {
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "contentType")]
    pub content_type: String,
    #[serde(rename = "path")]
    pub path: String,
    #[serde(rename = "name")]
    pub name: String,
    /// Size of the file in bytes
    #[serde(rename = "size")]
    pub size: u32,
}

impl File {
    pub fn new(
        id: uuid::Uuid,
        r#type: Type,
        content_type: String,
        path: String,
        name: String,
        size: u32,
    ) -> File {
        File {
            id,
            r#type,
            content_type,
            path,
            name,
            size,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "file")]
    File,
    #[serde(rename = "folder")]
    Folder,
}

impl Default for Type {
    fn default() -> Type {
        Self::File
    }
}
