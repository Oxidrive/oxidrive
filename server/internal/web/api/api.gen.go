//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.1-0.20240427135415-621b44626ac9 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"mime/multipart"
	"net/http"

	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for InstanceStatusStatusDatabase.
const (
	Postgresql InstanceStatusStatusDatabase = "postgresql"
	Sqlite     InstanceStatusStatusDatabase = "sqlite"
)

// Defines values for InstanceStatusStatusFileStorage.
const (
	Filesystem InstanceStatusStatusFileStorage = "filesystem"
	S3         InstanceStatusStatusFileStorage = "s3"
)

// FileUpload defines model for FileUpload.
type FileUpload struct {
	File openapi_types.File `json:"file"`
	Path string             `json:"path"`
}

// FileUploadResponse defines model for FileUploadResponse.
type FileUploadResponse struct {
	Ok bool `json:"ok"`
}

// GenericError defines model for GenericError.
type GenericError struct {
	// Error machine-readable error tag
	Error string `json:"error"`

	// Message human readable error message
	Message string `json:"message"`
}

// InstanceSetupRequest defines model for InstanceSetupRequest.
type InstanceSetupRequest struct {
	Admin struct {
		Password string `json:"password"`
		Username string `json:"username"`
	} `json:"admin"`
}

// InstanceSetupResponse defines model for InstanceSetupResponse.
type InstanceSetupResponse struct {
	Ok bool `json:"ok"`
}

// InstanceStatus defines model for InstanceStatus.
type InstanceStatus struct {
	Status struct {
		Database       InstanceStatusStatusDatabase    `json:"database"`
		FileStorage    InstanceStatusStatusFileStorage `json:"fileStorage"`
		PublicURL      string                          `json:"publicURL"`
		SetupCompleted bool                            `json:"setupCompleted"`
	} `json:"status"`
}

// InstanceStatusStatusDatabase defines model for InstanceStatus.Status.Database.
type InstanceStatusStatusDatabase string

// InstanceStatusStatusFileStorage defines model for InstanceStatus.Status.FileStorage.
type InstanceStatusStatusFileStorage string

// FilesUploadMultipartRequestBody defines body for FilesUpload for multipart/form-data ContentType.
type FilesUploadMultipartRequestBody = FileUpload

// InstanceSetupJSONRequestBody defines body for InstanceSetup for application/json ContentType.
type InstanceSetupJSONRequestBody = InstanceSetupRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Upload a file to Oxidrive
	// (POST /api/files)
	FilesUpload(w http.ResponseWriter, r *http.Request)
	// Get the instance status
	// (GET /api/instance)
	InstanceStatus(w http.ResponseWriter, r *http.Request)
	// Setup the instance and create the initial admin user
	// (POST /api/instance/setup)
	InstanceSetup(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// FilesUpload operation middleware
func (siw *ServerInterfaceWrapper) FilesUpload(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FilesUpload(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InstanceStatus operation middleware
func (siw *ServerInterfaceWrapper) InstanceStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InstanceStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InstanceSetup operation middleware
func (siw *ServerInterfaceWrapper) InstanceSetup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InstanceSetup(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/api/files", wrapper.FilesUpload)
	m.HandleFunc("GET "+options.BaseURL+"/api/instance", wrapper.InstanceStatus)
	m.HandleFunc("POST "+options.BaseURL+"/api/instance/setup", wrapper.InstanceSetup)

	return m
}

type FilesUploadRequestObject struct {
	Body *multipart.Reader
}

type FilesUploadResponseObject interface {
	VisitFilesUploadResponse(w http.ResponseWriter) error
}

type FilesUpload200JSONResponse FileUploadResponse

func (response FilesUpload200JSONResponse) VisitFilesUploadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FilesUpload400JSONResponse GenericError

func (response FilesUpload400JSONResponse) VisitFilesUploadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type FilesUploaddefaultJSONResponse struct {
	Body       GenericError
	StatusCode int
}

func (response FilesUploaddefaultJSONResponse) VisitFilesUploadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type InstanceStatusRequestObject struct {
}

type InstanceStatusResponseObject interface {
	VisitInstanceStatusResponse(w http.ResponseWriter) error
}

type InstanceStatus200JSONResponse InstanceStatus

func (response InstanceStatus200JSONResponse) VisitInstanceStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type InstanceStatusdefaultJSONResponse struct {
	Body       GenericError
	StatusCode int
}

func (response InstanceStatusdefaultJSONResponse) VisitInstanceStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type InstanceSetupRequestObject struct {
	Body *InstanceSetupJSONRequestBody
}

type InstanceSetupResponseObject interface {
	VisitInstanceSetupResponse(w http.ResponseWriter) error
}

type InstanceSetup200JSONResponse InstanceSetupResponse

func (response InstanceSetup200JSONResponse) VisitInstanceSetupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type InstanceSetup400JSONResponse GenericError

func (response InstanceSetup400JSONResponse) VisitInstanceSetupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type InstanceSetup409JSONResponse GenericError

func (response InstanceSetup409JSONResponse) VisitInstanceSetupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type InstanceSetupdefaultJSONResponse struct {
	Body       GenericError
	StatusCode int
}

func (response InstanceSetupdefaultJSONResponse) VisitInstanceSetupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Upload a file to Oxidrive
	// (POST /api/files)
	FilesUpload(ctx context.Context, request FilesUploadRequestObject) (FilesUploadResponseObject, error)
	// Get the instance status
	// (GET /api/instance)
	InstanceStatus(ctx context.Context, request InstanceStatusRequestObject) (InstanceStatusResponseObject, error)
	// Setup the instance and create the initial admin user
	// (POST /api/instance/setup)
	InstanceSetup(ctx context.Context, request InstanceSetupRequestObject) (InstanceSetupResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// FilesUpload operation middleware
func (sh *strictHandler) FilesUpload(w http.ResponseWriter, r *http.Request) {
	var request FilesUploadRequestObject

	if reader, err := r.MultipartReader(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode multipart body: %w", err))
		return
	} else {
		request.Body = reader
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FilesUpload(ctx, request.(FilesUploadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FilesUpload")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FilesUploadResponseObject); ok {
		if err := validResponse.VisitFilesUploadResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// InstanceStatus operation middleware
func (sh *strictHandler) InstanceStatus(w http.ResponseWriter, r *http.Request) {
	var request InstanceStatusRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.InstanceStatus(ctx, request.(InstanceStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "InstanceStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(InstanceStatusResponseObject); ok {
		if err := validResponse.VisitInstanceStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// InstanceSetup operation middleware
func (sh *strictHandler) InstanceSetup(w http.ResponseWriter, r *http.Request) {
	var request InstanceSetupRequestObject

	var body InstanceSetupJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.InstanceSetup(ctx, request.(InstanceSetupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "InstanceSetup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(InstanceSetupResponseObject); ok {
		if err := validResponse.VisitInstanceSetupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
