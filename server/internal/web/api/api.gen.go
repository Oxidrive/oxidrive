//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.1-0.20240508212224-070cd93f7893 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	TokenScopes = "token.Scopes"
)

// Defines values for CredentialsKind.
const (
	CredentialsKindPassword CredentialsKind = "password"
)

// Defines values for InstanceStatusStatusDatabase.
const (
	Postgresql InstanceStatusStatusDatabase = "postgresql"
	Sqlite     InstanceStatusStatusDatabase = "sqlite"
)

// Defines values for InstanceStatusStatusFileStorage.
const (
	Filesystem InstanceStatusStatusFileStorage = "filesystem"
	S3         InstanceStatusStatusFileStorage = "s3"
)

// Defines values for PasswordCredentialsKind.
const (
	PasswordCredentialsKindPassword PasswordCredentialsKind = "password"
)

// Credentials defines model for Credentials.
type Credentials struct {
	Kind  CredentialsKind `json:"kind"`
	union json.RawMessage
}

// CredentialsKind defines model for Credentials.Kind.
type CredentialsKind string

// Error defines model for Error.
type Error struct {
	// Error machine-readable error tag
	Error string `json:"error"`

	// Message human readable error message
	Message string `json:"message"`
}

// File defines model for File.
type File struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
	Path string             `json:"path"`

	// Size Size of the file in bytes
	Size int `json:"size"`
}

// FileList defines model for FileList.
type FileList struct {
	// Count number of items in the current slice of the collection
	Count int    `json:"count"`
	Items []File `json:"items"`

	// Next Cursor of the next element, to be used as the `after` parameter in paginated operations
	Next *string `json:"next"`

	// Total total number of items in the collection
	Total int `json:"total"`
}

// FileUpload defines model for FileUpload.
type FileUpload struct {
	File openapi_types.File `json:"file"`
	Path string             `json:"path"`
}

// FileUploadResponse defines model for FileUploadResponse.
type FileUploadResponse struct {
	Id string `json:"id"`
	Ok bool   `json:"ok"`
}

// InstanceSetupRequest defines model for InstanceSetupRequest.
type InstanceSetupRequest struct {
	Admin struct {
		Password string `json:"password"`
		Username string `json:"username"`
	} `json:"admin"`
}

// InstanceSetupResponse defines model for InstanceSetupResponse.
type InstanceSetupResponse struct {
	Ok bool `json:"ok"`
}

// InstanceStatus defines model for InstanceStatus.
type InstanceStatus struct {
	Status struct {
		Database       InstanceStatusStatusDatabase    `json:"database"`
		FileStorage    InstanceStatusStatusFileStorage `json:"fileStorage"`
		PublicURL      string                          `json:"publicURL"`
		SetupCompleted bool                            `json:"setupCompleted"`
	} `json:"status"`
}

// InstanceStatusStatusDatabase defines model for InstanceStatus.Status.Database.
type InstanceStatusStatusDatabase string

// InstanceStatusStatusFileStorage defines model for InstanceStatus.Status.FileStorage.
type InstanceStatusStatusFileStorage string

// ListInfo defines model for ListInfo.
type ListInfo struct {
	// Count number of items in the current slice of the collection
	Count int `json:"count"`

	// Next Cursor of the next element, to be used as the `after` parameter in paginated operations
	Next *string `json:"next"`

	// Total total number of items in the collection
	Total int `json:"total"`
}

// PasswordCredentials defines model for PasswordCredentials.
type PasswordCredentials struct {
	Kind     PasswordCredentialsKind `json:"kind"`
	Password string                  `json:"password"`
	Username string                  `json:"username"`
}

// PasswordCredentialsKind defines model for PasswordCredentials.Kind.
type PasswordCredentialsKind string

// Session defines model for Session.
type Session struct {
	ExpiresAt time.Time `json:"expiresAt"`
	Token     string    `json:"token"`
}

// SessionRequest defines model for SessionRequest.
type SessionRequest struct {
	Credentials Credentials `json:"credentials"`
}

// After defines model for After.
type After = string

// FilePrefix defines model for FilePrefix.
type FilePrefix = string

// First defines model for First.
type First = int

// InternalError defines model for InternalError.
type InternalError = Error

// FilesListParams defines parameters for FilesList.
type FilesListParams struct {
	// First Limit the number of items to return to only the first N
	First *First `form:"first,omitempty" json:"first,omitempty"`

	// After Cursor to fetch the next slice of the collection
	After *After `form:"after,omitempty" json:"after,omitempty"`

	// Prefix Prefix to filter files for. This is matched against the directory the files resides in, not as a generic prefix.
	// E.g. a prefix `hello` will match `hello/world.txt` but not `hello/dear/world.txt`.
	Prefix *FilePrefix `form:"prefix,omitempty" json:"prefix,omitempty"`
}

// FilesUploadMultipartRequestBody defines body for FilesUpload for multipart/form-data ContentType.
type FilesUploadMultipartRequestBody = FileUpload

// InstanceSetupJSONRequestBody defines body for InstanceSetup for application/json ContentType.
type InstanceSetupJSONRequestBody = InstanceSetupRequest

// AuthCreateSessionJSONRequestBody defines body for AuthCreateSession for application/json ContentType.
type AuthCreateSessionJSONRequestBody = SessionRequest

// AsPasswordCredentials returns the union data inside the Credentials as a PasswordCredentials
func (t Credentials) AsPasswordCredentials() (PasswordCredentials, error) {
	var body PasswordCredentials
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPasswordCredentials overwrites any union data inside the Credentials as the provided PasswordCredentials
func (t *Credentials) FromPasswordCredentials(v PasswordCredentials) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePasswordCredentials performs a merge with any union data inside the Credentials, using the provided PasswordCredentials
func (t *Credentials) MergePasswordCredentials(v PasswordCredentials) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Credentials) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["kind"], err = json.Marshal(t.Kind)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'kind': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *Credentials) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["kind"]; found {
		err = json.Unmarshal(raw, &t.Kind)
		if err != nil {
			return fmt.Errorf("error reading 'kind': %w", err)
		}
	}

	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all available files
	// (GET /api/files)
	FilesList(w http.ResponseWriter, r *http.Request, params FilesListParams)
	// Upload a file to Oxidrive
	// (POST /api/files)
	FilesUpload(w http.ResponseWriter, r *http.Request)
	// Get the instance status
	// (GET /api/instance)
	InstanceStatus(w http.ResponseWriter, r *http.Request)
	// Setup the instance and create the initial admin user
	// (POST /api/instance/setup)
	InstanceSetup(w http.ResponseWriter, r *http.Request)
	// Create a new session and generate the corresponding token
	// (POST /api/sessions)
	AuthCreateSession(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// FilesList operation middleware
func (siw *ServerInterfaceWrapper) FilesList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FilesListParams

	// ------------- Optional query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, false, "first", r.URL.Query(), &params.First)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "first", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "prefix" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefix", r.URL.Query(), &params.Prefix)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "prefix", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FilesList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FilesUpload operation middleware
func (siw *ServerInterfaceWrapper) FilesUpload(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FilesUpload(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InstanceStatus operation middleware
func (siw *ServerInterfaceWrapper) InstanceStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InstanceStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InstanceSetup operation middleware
func (siw *ServerInterfaceWrapper) InstanceSetup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InstanceSetup(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AuthCreateSession operation middleware
func (siw *ServerInterfaceWrapper) AuthCreateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthCreateSession(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/api/files", wrapper.FilesList)
	m.HandleFunc("POST "+options.BaseURL+"/api/files", wrapper.FilesUpload)
	m.HandleFunc("GET "+options.BaseURL+"/api/instance", wrapper.InstanceStatus)
	m.HandleFunc("POST "+options.BaseURL+"/api/instance/setup", wrapper.InstanceSetup)
	m.HandleFunc("POST "+options.BaseURL+"/api/sessions", wrapper.AuthCreateSession)

	return m
}

type ErrorJSONResponse Error

type InternalErrorJSONResponse Error

type FilesListRequestObject struct {
	Params FilesListParams
}

type FilesListResponseObject interface {
	VisitFilesListResponse(w http.ResponseWriter) error
}

type FilesList200JSONResponse FileList

func (response FilesList200JSONResponse) VisitFilesListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FilesListdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response FilesListdefaultJSONResponse) VisitFilesListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type FilesUploadRequestObject struct {
	Body *multipart.Reader
}

type FilesUploadResponseObject interface {
	VisitFilesUploadResponse(w http.ResponseWriter) error
}

type FilesUpload200JSONResponse FileUploadResponse

func (response FilesUpload200JSONResponse) VisitFilesUploadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FilesUpload400JSONResponse struct{ ErrorJSONResponse }

func (response FilesUpload400JSONResponse) VisitFilesUploadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type FilesUploaddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response FilesUploaddefaultJSONResponse) VisitFilesUploadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type InstanceStatusRequestObject struct {
}

type InstanceStatusResponseObject interface {
	VisitInstanceStatusResponse(w http.ResponseWriter) error
}

type InstanceStatus200JSONResponse InstanceStatus

func (response InstanceStatus200JSONResponse) VisitInstanceStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type InstanceStatusdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response InstanceStatusdefaultJSONResponse) VisitInstanceStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type InstanceSetupRequestObject struct {
	Body *InstanceSetupJSONRequestBody
}

type InstanceSetupResponseObject interface {
	VisitInstanceSetupResponse(w http.ResponseWriter) error
}

type InstanceSetup200JSONResponse InstanceSetupResponse

func (response InstanceSetup200JSONResponse) VisitInstanceSetupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type InstanceSetup400JSONResponse struct{ ErrorJSONResponse }

func (response InstanceSetup400JSONResponse) VisitInstanceSetupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type InstanceSetup409JSONResponse Error

func (response InstanceSetup409JSONResponse) VisitInstanceSetupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type InstanceSetupdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response InstanceSetupdefaultJSONResponse) VisitInstanceSetupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AuthCreateSessionRequestObject struct {
	Body *AuthCreateSessionJSONRequestBody
}

type AuthCreateSessionResponseObject interface {
	VisitAuthCreateSessionResponse(w http.ResponseWriter) error
}

type AuthCreateSession200JSONResponse Session

func (response AuthCreateSession200JSONResponse) VisitAuthCreateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AuthCreateSession401JSONResponse struct{ ErrorJSONResponse }

func (response AuthCreateSession401JSONResponse) VisitAuthCreateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AuthCreateSessiondefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response AuthCreateSessiondefaultJSONResponse) VisitAuthCreateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all available files
	// (GET /api/files)
	FilesList(ctx context.Context, request FilesListRequestObject) (FilesListResponseObject, error)
	// Upload a file to Oxidrive
	// (POST /api/files)
	FilesUpload(ctx context.Context, request FilesUploadRequestObject) (FilesUploadResponseObject, error)
	// Get the instance status
	// (GET /api/instance)
	InstanceStatus(ctx context.Context, request InstanceStatusRequestObject) (InstanceStatusResponseObject, error)
	// Setup the instance and create the initial admin user
	// (POST /api/instance/setup)
	InstanceSetup(ctx context.Context, request InstanceSetupRequestObject) (InstanceSetupResponseObject, error)
	// Create a new session and generate the corresponding token
	// (POST /api/sessions)
	AuthCreateSession(ctx context.Context, request AuthCreateSessionRequestObject) (AuthCreateSessionResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// FilesList operation middleware
func (sh *strictHandler) FilesList(w http.ResponseWriter, r *http.Request, params FilesListParams) {
	var request FilesListRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FilesList(ctx, request.(FilesListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FilesList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FilesListResponseObject); ok {
		if err := validResponse.VisitFilesListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// FilesUpload operation middleware
func (sh *strictHandler) FilesUpload(w http.ResponseWriter, r *http.Request) {
	var request FilesUploadRequestObject

	if reader, err := r.MultipartReader(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode multipart body: %w", err))
		return
	} else {
		request.Body = reader
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FilesUpload(ctx, request.(FilesUploadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FilesUpload")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FilesUploadResponseObject); ok {
		if err := validResponse.VisitFilesUploadResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// InstanceStatus operation middleware
func (sh *strictHandler) InstanceStatus(w http.ResponseWriter, r *http.Request) {
	var request InstanceStatusRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.InstanceStatus(ctx, request.(InstanceStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "InstanceStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(InstanceStatusResponseObject); ok {
		if err := validResponse.VisitInstanceStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// InstanceSetup operation middleware
func (sh *strictHandler) InstanceSetup(w http.ResponseWriter, r *http.Request) {
	var request InstanceSetupRequestObject

	var body InstanceSetupJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.InstanceSetup(ctx, request.(InstanceSetupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "InstanceSetup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(InstanceSetupResponseObject); ok {
		if err := validResponse.VisitInstanceSetupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AuthCreateSession operation middleware
func (sh *strictHandler) AuthCreateSession(w http.ResponseWriter, r *http.Request) {
	var request AuthCreateSessionRequestObject

	var body AuthCreateSessionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AuthCreateSession(ctx, request.(AuthCreateSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthCreateSession")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AuthCreateSessionResponseObject); ok {
		if err := validResponse.VisitAuthCreateSessionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
